Current Plan

1. Refactor RoomViewModel to CombatManager
	- Pass and Display visual result in ViewModel is misleading.
	- Implement ActionState as part of RoomGameManager
	- Create ActionManager
	- Implement TurnManager

1.5. Add methods like applyEffect/decreaseArmor/increaseHealth to Character class or Creature protocol itself to incapsulate handling of Character State instead of giving EffectManager an ability to change target state directly

2. Add HP/Mana regen effects, debuffs, fireboll buttons

3. Add mechanics/abilities

- Add accuracy
- Add armor pen
- Add stun effect
- Add crit
- Add magic resist
- Add crushing blow (armor pen) ability

4. Add animation of the end of the fight
5. Add animation of entering to the new room
6. Add Reward Screen after killing enemy


100. Add enemy AI
101. Separate an entire game flow into RoomGameManager with all kinds of managers as injections and inject it to ViewModel


Optional:
1. Create Class Diagram
2. Create 1 and 10 A4 lists about Game overall and it's design document'
3. Refactor view with input damage/spells
4. Refactor combat manager to make it CombatCalculator
5. Add rewards screen after each fight with gold, exp, items and button to get to the new room
6. Put repeated checks of mana/health/energy/hero/enemy into separate method
7. Create GameOverScreen
8. Add cleanBuffs/Debuffs/AllEffects abilities
9. Refactor RoomGameState class and RoomState struct from Managers and RoomModule
10. Create TurnStateMachine Enum and TurnStateManager to manage turns:

enum TurnState {
    case playerTurn // activate buffs/debuffs let user attack
    case enemyTurn // activate buffs/debuffs let enemy attack
    case transitioning // add extra effects while transition
}

final class TurnStateMachine {
    var state: TurnState = .playerTurn
    func advanceTurn() { ... }
}
