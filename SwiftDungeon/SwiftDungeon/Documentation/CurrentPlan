Current Plan


2.
	- Implement DungeonView with tiles
		1. Predefine Game Levels
		2. Define rect for corridor and square for room
		3. Separate explored/empty tiles
		
	- Implement CorridorView
	- Implement TownView
	- Implement WorldView
	- Implement AppCoordinator
    - Implement ModuleBuilder
    - Implement WorldStateMachine


3. Add mechanics/abilities

- Add accuracy (current and max)
- Add armor pen (current and max)
- Add stun effect
- Add crit (current and max)
- Add magic resist (current and max)
- Add couldawn for abilities (you can't use heal twice in a single turn)

Optional:
	- Pass and Display visual result in ViewModel is misleading.
	- Implement ActionState as part of RoomGameManager
	- Add purple effect on target of bleed/stun/debuffs
	- Squire should not animate if not enough resources for action
	- Add shaking effect for ticking effect in the start of the turn
	- refactor each method like heal() to create separate local properties for each part of the formula like:
		let manaCost = GameConfig.spellManaCost
		if hero.currentMana >= manaCost { cast }
	- refactor checks like isGameOn, guard host/target into separate method

4. Add animation of the end of the fight
5. Add animation of entering to the new room
6. Add Reward Screen after killing enemy


100. Add enemy AI
101. Separate an entire game flow into RoomGameManager with all kinds of managers as injections and inject it to ViewModel
102. Refactor ModuleBuilder to make it flexiable and accordingly to Dependency Injection	


Optional:
1. Create Class Diagram
2. Create 1 and 10 A4 lists about Game overall and it's design document'
3. Refactor view with input damage/spells
4. Refactor combat manager to make it CombatCalculator
5. Add rewards screen after each fight with gold, exp, items and button to get to the new room
6. Put repeated checks of mana/health/energy/hero/enemy into separate method
7. Create GameOverScreen
8. Add cleanBuffs/Debuffs/AllEffects abilities
9. Refactor RoomGameState class and RoomState struct from Managers and RoomModule
10. Create TurnStateMachine Enum and TurnStateManager to manage turns:

enum TurnState {
    case playerTurn // activate buffs/debuffs let user attack
    case enemyTurn // activate buffs/debuffs let enemy attack
    case transitioning // add extra effects while transition
}

final class TurnStateMachine {
    var state: TurnState = .playerTurn
    func advanceTurn() { ... }
}
